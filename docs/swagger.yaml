definitions:
  auth.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  auth.RegisterRequest:
    properties:
      age:
        minimum: 8
        type: integer
      email:
        type: string
      password:
        minLength: 6
        type: string
      profile_image_url:
        type: string
      username:
        type: string
    required:
    - age
    - email
    - password
    - username
    type: object
  comment.CommentResponse:
    properties:
      id:
        type: integer
      message:
        type: string
      photo_id:
        type: integer
      user_id:
        type: integer
    type: object
  comment.CommentWithRelationResponse:
    properties:
      id:
        type: integer
      message:
        type: string
      photo:
        $ref: '#/definitions/photo.PhotoResponse'
      photo_id:
        type: integer
      user:
        $ref: '#/definitions/user.UserRelationsResponse'
      user_id:
        type: integer
    type: object
  comment.CreateCommentRequest:
    properties:
      message:
        type: string
      photo_id:
        type: integer
    required:
    - message
    - photo_id
    type: object
  comment.UpdateCommentRequest:
    properties:
      message:
        type: string
    required:
    - message
    type: object
  photo.CreatePhotoRequest:
    properties:
      caption:
        type: string
      photo_url:
        type: string
      title:
        type: string
    required:
    - photo_url
    - title
    type: object
  photo.PhotoResponse:
    properties:
      caption:
        type: string
      id:
        type: integer
      photo_url:
        type: string
      title:
        type: string
      user_id:
        type: integer
    type: object
  photo.PhotoWithRelationResponse:
    properties:
      caption:
        type: string
      id:
        type: integer
      photo_url:
        type: string
      title:
        type: string
      user:
        $ref: '#/definitions/user.UserRelationsResponse'
      user_id:
        type: integer
    type: object
  photo.UpdatePhotoRequest:
    properties:
      caption:
        type: string
      photo_url:
        type: string
      title:
        type: string
    required:
    - photo_url
    - title
    type: object
  responses.ErrorMessage:
    properties:
      message:
        description: StatusCode int    `json:"statusCode"`
        type: string
    type: object
  responses.Token:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFwdXRyYWRld2FudGFyYUBnbWFpbC5jb20iLCJ1c2VybmFtZSI6ImFsaWZkd3QiLCJhZ2UiOjI0LCJpc3MiOiIxNzEwODY5NTgzIiwic3ViIjoiMiIsImV4cCI6MTcxMDg3MTM4MywiaWF0IjoxNzEwODY5NTgzLCJqdGkiOiI3OTQzZDc0Ny04Mzk1LTRlMzktYmZmYS1iM2RiODM0ZGZjNmEifQ.Ngh-kJiAh3_nEmaWP5emX2iZSTF-4IAykH6VC9szyxY
        type: string
    type: object
  socialmedia.CreateSocialMediaRequest:
    properties:
      name:
        type: string
      social_media_url:
        type: string
    required:
    - name
    - social_media_url
    type: object
  socialmedia.SocialMediaResponse:
    properties:
      id:
        type: integer
      name:
        type: string
      social_media_url:
        type: string
      user_id:
        type: integer
    type: object
  socialmedia.SocialMediaWithRelationResponse:
    properties:
      id:
        type: integer
      name:
        type: string
      social_media_url:
        type: string
      user:
        $ref: '#/definitions/user.UserRelationsResponse'
      user_id:
        type: integer
    type: object
  socialmedia.UpdateSocialMediaRequest:
    properties:
      name:
        type: string
      social_media_url:
        type: string
    required:
    - name
    - social_media_url
    type: object
  user.UpdateUserRequest:
    properties:
      age:
        minimum: 8
        type: integer
      email:
        type: string
      profile_image_url:
        type: string
      username:
        type: string
    required:
    - age
    - email
    - username
    type: object
  user.UserRelationsResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
  user.UserResponse:
    properties:
      age:
        type: integer
      email:
        type: string
      id:
        type: integer
      profile_image_url:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: aputradewantara@gmail.com
    name: Alif Dewantara
    url: http://github.com/alifdwt
  description: This is MyGram API for final project at Scalable Webservice with Golang
    - DTS Kominfo
  license:
    name: Apache 2.0
  termsOfService: http://swagger.io/terms/
  title: MyGram
  version: "1.0"
paths:
  /comments:
    get:
      consumes:
      - application/json
      description: Get all comments from the application
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/comment.CommentWithRelationResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorMessage'
      summary: Get all comments
      tags:
      - comments
    post:
      consumes:
      - application/json
      description: Create comment
      parameters:
      - description: comment data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/comment.CreateCommentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/comment.CommentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorMessage'
      security:
      - BearerAuth: []
      summary: Create comment
      tags:
      - comments
  /comments/{commentId}:
    delete:
      consumes:
      - application/json
      description: Delete comment by id
      parameters:
      - description: Comment ID
        in: path
        name: commentId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorMessage'
      security:
      - BearerAuth: []
      summary: Delete comment
      tags:
      - comments
    get:
      consumes:
      - application/json
      description: Get comment by id
      parameters:
      - description: Comment ID
        in: path
        name: commentId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/comment.CommentWithRelationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorMessage'
      summary: Get comment
      tags:
      - comments
    put:
      consumes:
      - application/json
      description: Update comment by id
      parameters:
      - description: Comment ID
        in: path
        name: commentId
        required: true
        type: integer
      - description: comment data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/comment.UpdateCommentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/comment.CommentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorMessage'
      security:
      - BearerAuth: []
      summary: Update comment
      tags:
      - comments
  /photos:
    get:
      consumes:
      - application/json
      description: Get all photos from the application
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/photo.PhotoWithRelationResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorMessage'
      security:
      - BearerAuth: []
      summary: Get all photos
      tags:
      - photos
    post:
      consumes:
      - application/json
      description: Create photo
      parameters:
      - description: photo data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/photo.CreatePhotoRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/photo.PhotoResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorMessage'
      security:
      - BearerAuth: []
      summary: Create photo
      tags:
      - photos
  /photos/{photoId}:
    delete:
      consumes:
      - application/json
      description: Delete photo
      parameters:
      - description: Photo ID
        in: path
        name: photoId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorMessage'
      security:
      - BearerAuth: []
      - BearerAuth: []
      summary: Delete photo
      tags:
      - photos
    get:
      consumes:
      - application/json
      description: Get photo by id
      parameters:
      - description: Photo ID
        in: path
        name: photoId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/photo.PhotoWithRelationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorMessage'
      security:
      - BearerAuth: []
      summary: Get photo
      tags:
      - photos
    put:
      consumes:
      - application/json
      description: Update photo by id
      parameters:
      - description: Photo ID
        in: path
        name: photoId
        required: true
        type: integer
      - description: photo data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/photo.UpdatePhotoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/photo.PhotoResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorMessage'
      security:
      - BearerAuth: []
      summary: Update photo
      tags:
      - photos
  /socialmedias:
    get:
      consumes:
      - application/json
      description: Get all social medias from the application
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/socialmedia.SocialMediaWithRelationResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorMessage'
      security:
      - BearerAuth: []
      summary: Get all social medias
      tags:
      - social medias
    post:
      consumes:
      - application/json
      description: Create social media
      parameters:
      - description: social media data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/socialmedia.CreateSocialMediaRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/socialmedia.SocialMediaResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorMessage'
      security:
      - BearerAuth: []
      summary: Create social media
      tags:
      - social medias
  /socialmedias/{socialMediaId}:
    delete:
      consumes:
      - application/json
      description: Delete social media
      parameters:
      - description: Social Media ID
        in: path
        name: socialMediaId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorMessage'
      security:
      - BearerAuth: []
      summary: Delete social media
      tags:
      - social medias
    get:
      consumes:
      - application/json
      description: Get social media by id
      parameters:
      - description: Social Media ID
        in: path
        name: socialMediaId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/socialmedia.SocialMediaWithRelationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorMessage'
      security:
      - BearerAuth: []
      summary: Get social media
      tags:
      - social medias
    put:
      consumes:
      - application/json
      description: Update social media
      parameters:
      - description: Social Media ID
        in: path
        name: socialMediaId
        required: true
        type: integer
      - description: social media data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/socialmedia.UpdateSocialMediaRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/socialmedia.SocialMediaResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorMessage'
      security:
      - BearerAuth: []
      summary: Update social media
      tags:
      - social medias
  /users:
    delete:
      consumes:
      - application/json
      description: Delete user from the application
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorMessage'
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user
      parameters:
      - description: user data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/user.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorMessage'
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - users
  /users/login:
    post:
      consumes:
      - application/json
      description: Login with email and password to get a JWT token
      parameters:
      - description: user data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.Token'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorMessage'
      summary: Login to the application
      tags:
      - users
  /users/register:
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: user data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorMessage'
      summary: Register to the application
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
